import numpy as np
import pandas as pd
import random

data = {
    'Customer_ID': [1, 2, 3, 4, 5, 6, 7],
    'Total_Spend': [500, 150, 300, 450, 250, 700, 550],
    'Frequency_of_Purchase': [10, 5, 9, 10, 5, 12, 9],
    'Average_Item_Price': [51, 32, 40, 45, 36, 60, 56]
}

df = pd.DataFrame(data)

X = df[['Total_Spend', 'Frequency_of_Purchase', 'Average_Item_Price']].values

def standardize_data(X):
   
    means = np.mean(X, axis=0)
    stds = np.std(X, axis=0)
    return (X - means) / stds

X_scaled = standardize_data(X)

def initialize_centroids(X, k):
    random_indices = random.sample(range(X.shape[0]), k)
    return X[random_indices]

def calculate_distances(X, centroids):
    distances = np.zeros((X.shape[0], centroids.shape[0]))
    for i in range(X.shape[0]):
        for j in range(centroids.shape[0]):
            distances[i, j] = np.linalg.norm(X[i] - centroids[j])
    return distances

def assign_clusters(X, centroids):
    distances = calculate_distances(X, centroids)
    return np.argmin(distances, axis=1)

def recompute_centroids(X, labels, k):
    centroids = np.zeros((k, X.shape[1]))
    for i in range(k):
        points_in_cluster = X[labels == i]
        if len(points_in_cluster) > 0:
            centroids[i] = np.mean(points_in_cluster, axis=0)
    return centroids

def k_means(X, k, max_iters=100, tol=1e-4):
  
    centroids = initialize_centroids(X, k)
    
    prev_centroids = np.zeros_like(centroids)
    
    for i in range(max_iters):
       
        labels = assign_clusters(X, centroids)
        
        centroids = recompute_centroids(X, labels, k)
        
        if np.all(np.abs(centroids - prev_centroids) < tol):
            print(f"Converged after {i+1} iterations.")
            break
        
        prev_centroids = centroids.copy()
    
    return centroids, labels

k = 3  
centroids, labels = k_means(X_scaled, k)

df['Cluster'] = labels

print("Final Centroids:\n", centroids)
print("\nClustered Data:\n", df)
